# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Editor
alias vim="nvim"
export EDITOR="nvim"

# Vi mode -- https://github.com/jeffreytse/zsh-vi-mode
source /usr/share/zsh/plugins/zsh-vi-mode/zsh-vi-mode.plugin.zsh

# GoLang
# https://github.com/canha/golang-tools-install-script
export GOROOT=/home/mau/.go
export PATH=$GOROOT/bin:$PATH
export GOPATH=/home/mau/go
export PATH=$GOPATH/bin:$PATH


# History ######################################################################

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=10000
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.

# z
[[ -r "/usr/share/z/z.sh" ]] && source /usr/share/z/z.sh

# fzf -- https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings
source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh

# When selecting files with fzf, we show file content with syntax highlighting,
# or without highlighting if it's not a source file. If the file is a directory,
# we use tree to show the directory's contents.
# We only load the first 200 lines of the file which enables fast previews
# of large text files.
# Requires highlight and tree: pacman -S highlight tree
export FZF_DEFAULT_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null ||
cat {} || tree -C {}) 2> /dev/null | head -200'"

# Shell Behaviours #############################################################
setopt autocd notify
bindkey -v
bindkey ^R history-incremental-search-backward
export KEYTIMEOUT=15
bindkey -M viins 'jj' vi-cmd-mode

# Setup fzf integration
export FZF_DEFAULT_COMMAND="fd --type f"

# Setup further completions
export FPATH=~/.local/share/zsh/site-functions:$FPATH

# Alias
alias copy="xclip -sel clip"
alias paste="xclip -sel c -o"

# functions
# # ex - archive extractor
# usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tar.xz)    tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# make filename absolute
abs() { realpath $1 }

#Very often changing to a directory is followed by the ls command to list its contents. Therefore it is helpful to have a second function doing both at once. In this example we will name it cl (change list) and show an error message if the specified directory does not exist.

cl() {
	local dir="$1"
	local dir="${dir:=$HOME}"
	if [[ -d "$dir" ]]; then
		cd "$dir" >/dev/null; ls
	else
		echo "bash: cl: $dir: Directory not found"
	fi
}

# mkdir and cd into it

mkcd() {
    mkdir -p "$@" && cd "$@";
}

# cd to tmp dir
cdtemp() {
    DATE=$(date +%m-%d-%Y-%H:%M)
    TMPDIR=$(mktemp --directory --suffix="-$DATE")
    cd "$TMPDIR"
}

# cp to tmp dir
cptemp() {
    local file="$1"
    DATE=$(date +%m-%d-%Y-%H:%M)
    TMPDIR=$(mktemp --directory --suffix="-$DATE")
    cp -r "$1" "$TMPDIR"
    echo "File $1 was copied to $TMPDIR"
}


ec() {
  local LAST_EXIT_CODE=$?
  echo $LAST_EXIT_CODE
}

# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
	git
	zsh-vi-mode
	zsh-syntax-highlighting
	zsh-autosuggestions
	z
)

source $ZSH/oh-my-zsh.sh
source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh
